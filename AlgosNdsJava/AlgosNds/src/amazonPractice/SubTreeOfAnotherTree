     3
    / \
   4   5
  / \
 1   2
 
 
 class Solution {
    public boolean isSubtree(TreeNode s, TreeNode t) {
    	if (s == null || t == null)
    		return true;
        Queue<TreeNode> q = new ArrayDeque<>();
        q.add(TreeNode s);
        while(!q.isEmpty()) {
        	TreeNode node = q.poll();
        	if (isSame(node,t))
        		return true;
			if (node.left!=null)
				q.add(node.left);
			if (node.right!=null)
				q.add(node.right);
        		
        }
        return false;
    }
    
    private boolean isSame(TreeNode s, TreeNode t) {
    	if (s == null && t ==null)
    		return true;
    	if (s == null || t == null)
    		return false;
    	if (s.val!=t.val)
    		return false;
    	return isSame(s.left, t.left) && isSame(s.right, t.right);
    }
}