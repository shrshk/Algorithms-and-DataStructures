class Node {
    String value;
    int timestamp;

    Node(String value, int timestamp) {
        this.value = value;
        this.timestamp = timestamp;
    }
}

class TimeMap {    
    Map<String, PriorityQueue<Node>> map;
    
    /** Initialize your data structure here. */
    public TimeMap() {
        map = new HashMap<>();
    }
    
    public void set(String key, String value, int timestamp) {
        PriorityQueue<Node> pq;
        
        if (map.containsKey(key)) {
            map.get(key).add(new Node(value, timestamp));
        } else {
            pq = new PriorityQueue<>((a, b) -> b.timestamp - a.timestamp);
            pq.add(new Node(value, timestamp));
            map.put(key, pq);
        }
    }
    
    public String get(String key, int timestamp) {
        if (!map.containsKey(key)) return "";
        
        PriorityQueue<Node> pq = map.get(key);
        
        for (Node item: pq) {
            if (item.timestamp == timestamp) {
                return item.value;
            } else if (item.timestamp <= timestamp) {
                return item.value;
            }
        };
        
        return "";
    }
    
    
    //new Comparator<Node>() {
                    @Override
                    public int compare(Node n1, Node n2) {
                        if (n1.timestamp<n2.timestamp) {
                            return -1;
                        }
                        return 0;
                    }
                })
}



Map<String, String> map;
    Solution() {
        map = new HashMap<>();
    }
    
    public String get(String key) {
        return map.get(key)!=null ? map.get(key) : "";
    }
    
    public void put(String key, String value) {
        map.put(key, value);
    }
    
    public static void main(String args[] ) throws Exception {
        /* Enter your code here. Read input from STDIN. Print output to STDOUT */
        Solution s = new Solution();
        s.put("foo", "bar");
        System.out.println(s.get("foo"));
        // O(n)
        // O(1)
        
        
    }


import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;
import java.time.Instant;

class Node {
    String value;
    int timestamp;
    
    Node(String value, int timestamp) {
        this.value = value;
        this.timestamp = timestamp;
    }
    
}

public class Solution {
    Map<String, PriorityQueue<Node>> map;
    Solution() {
        map = new HashMap<>();
    }
    
    public String get(String key) {
        if(!map.containsKey(key)) {
            return "";
        }
        PriorityQueue<Node> pq = map.get(key);
        Node n = pq.peek();
        return n.value;
    }
    
    public String get(String key, long timestamp) {
        if(!map.containsKey(key)) {
            return "";
        }
        Queue<Node> pq = map.get(key);
        
        for (Node n: pq) {
            if (n.timestamp == timestamp) { //122
                return n.value;
            }
        }
        
        return "";
    }
    
    public int set(String key, String value) {
        int timestamp = (int) Instant.now().toEpochMilli();
        PriorityQueue<Node> pq;
        if (!map.containsKey(key)) {
            pq = new PriorityQueue<Node>((n1, n2) -> (n2.timestamp - n1.timestamp));
            Node newNode = new Node(value, timestamp);
            pq.add(newNode);
            map.put(key, pq);
        } else {
            pq = map.get(key);
            pq.add(new Node(value, timestamp));
            map.put(key, pq);
        }
        
        return timestamp;
    }
    
    
    public static void main(String args[] ) throws Exception {
        /* Enter your code here. Read input from STDIN. Print output to STDOUT */
        
        // {'s': [{val, tim1}, {val, tim2}]}
        // timeStamp
        
        // Map<String, Priorityq 
        
        // String : [t1,t2,t3]
        // Map<t: [1,2,]> 
        Solution s = new Solution();
        int timestamp = s.set("foo", "bar");
        
        System.out.println(s.get("foo"));
        System.out.println(s.get("foo", timestamp));
        
        
        
        
        
    }
}











