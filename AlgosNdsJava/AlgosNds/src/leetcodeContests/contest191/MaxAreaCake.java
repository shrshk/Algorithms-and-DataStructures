package leetcodeContests.contest191;

import java.util.ArrayDeque;
import java.util.Queue;
import java.util.stream.IntStream;

//if (i == 2 && j == 1) {
//	System.out.println("here");
//}

public class MaxAreaCake {
	// 5 4 3,1 1
	// steps
	// use markers try and visit connected components
	// update max from bfs

	public int maxArea(int h, int w, int[] horizontalCuts, int[] verticalCuts) {
		int maxArea = 0;
		int[][] matrix = new int[h][w];
		boolean[][] visited = new boolean[h][w];
		for (int i = 0; i < h; i++) {
			for (int j = 0; j < w; j++) {
				if (!visited[i][j]) {
					int area = bfs(matrix, h, w, visited, new int[] { i, j }, horizontalCuts, verticalCuts);
					maxArea = Math.max(maxArea, area);
				}

			}
		}

		return maxArea;

	}

	private int bfs(int[][] matrix, int h, int w, boolean[][] visited, int[] loc, int[] horizontalCuts,
			int[] verticalCuts) {

		int[][] xDirs = new int[][] { { 1, 0 }, { -1, 0 } };
		int[][] yDirs = new int[][] { { 0, 1 }, { 0, -1 } };
		Queue<int[]> q = new ArrayDeque<>();

		q.add(loc);

		// IntStream.of(a).anyMatch(x -> x == 4);
		int area = 0;

		while (!q.isEmpty()) {
			int[] curr = q.poll();
			int currX = curr[0];
			int currY = curr[1];

			if (visited[currX][currY])
				continue;

			visited[currX][currY] = true;
			area++;
			for (int[] dir : xDirs) {
				int x = currX + dir[0];
				int y = currY + dir[1];

				if (x >= 0 && x < h && horizontalCheck(x, horizontalCuts) && y >= 0 && y < w && !visited[x][y]) {
					q.add(new int[] { x, y });
				}

			}

			for (int[] dir : yDirs) {
				int x = currX + dir[0];
				int y = currY + dir[1];

				if (x >= 0 && x < h && y >= 0 && y < w && verticalCheck(y, verticalCuts) && !visited[x][y]) {
					q.add(new int[] { x, y });
				}

			}

		}

		return area;

	}

	private boolean horizontalCheck(int val, int[] horizontalCuts) {
		return !IntStream.of(horizontalCuts).anyMatch(x -> x == val);
	}

	private boolean verticalCheck(int val, int[] verticalCuts) {
		return !IntStream.of(verticalCuts).anyMatch(x -> x == val);
	}

	public static void main(String[] args) {
		int[] hor = new int[] { 714, 399, 450, 823, 830, 188, 635, 48, 260, 330, 85, 75, 197, 806, 496, 497, 237, 375,
				696, 9, 603, 581, 673, 455, 205, 270, 78, 417, 723, 341, 506, 216, 52, 454, 276, 522, 165, 436, 8, 187,
				802, 153, 485, 148, 828, 144, 128, 682, 468, 389, 583, 486, 615, 97, 348, 170, 77, 59, 138, 191, 306,
				512, 593, 811, 114, 652, 427, 215, 117, 746, 424, 110, 572, 748, 21, 629, 456, 311, 360, 316, 390, 109,
				614, 309, 68, 660, 478, 361, 115, 385, 656, 558, 623, 366, 343, 55, 622, 120, 295, 252, 342, 223, 753,
				132, 74, 561, 475, 700, 538, 448, 627, 278, 798, 231, 151, 201, 127, 35, 589, 298, 229, 221, 737, 217,
				795, 602, 49, 621, 426, 46, 66, 769, 302, 393, 272, 775, 164, 89, 95, 220, 491, 457, 356, 106, 767, 88,
				849, 238, 423, 118, 458, 189, 156, 565, 739, 378, 377, 701, 782, 846, 161, 101, 483, 192, 814, 578, 494,
				834, 218, 642, 757, 793, 96, 402, 71, 591, 379, 149, 609, 258, 628, 62, 102, 251, 373, 121, 715, 208,
				773, 25, 659, 525, 785, 105, 34, 274, 516, 137, 56, 245, 821, 463, 303, 500, 86, 418, 605, 112, 293,
				228, 777, 327, 440, 729, 384, 381, 535, 429, 818, 29, 307, 347, 810, 554, 765, 537, 211, 607, 5, 39,
				694, 842, 281, 100, 410, 480, 150, 250, 678, 487, 778, 708, 574, 601, 608, 340, 599, 108, 225, 387, 58,
				774, 434, 428, 44, 762, 576, 124, 116, 334, 464, 687, 724, 514, 838, 369, 401, 83, 444, 663, 693 };
		int[] ver = new int[] { 156, 7, 300, 373, 335, 105, 26, 225, 414, 126, 81, 306, 52, 218, 471, 264, 45, 481, 181,
				14, 368, 80, 321, 284, 502, 144, 61, 291, 344, 98, 190, 347, 323, 169, 33, 304, 137, 158, 166, 371, 327,
				212, 24, 19, 132, 179, 362, 457, 514, 462, 365, 167, 161, 46, 8, 496, 473, 464, 85, 72, 151, 204, 360,
				240, 90, 130, 355, 489, 56, 446, 438, 421, 121, 236, 345, 235, 463, 478, 404, 516, 251, 44, 448, 390,
				191, 29, 485, 223, 320, 302, 34, 326, 20, 423, 269, 76, 458, 480, 31, 99, 328, 461, 249, 146, 193, 111,
				420, 293, 27, 519, 97, 276, 94, 78, 11, 253, 296, 445, 248, 433, 165, 491, 83, 68, 517, 282, 273, 450,
				215, 509, 268, 227, 303, 358, 6, 487, 95, 384, 515, 149, 219, 465, 372, 38, 18, 280, 367, 188, 203, 388,
				272, 171, 376, 329, 361, 402, 369, 488, 109, 393, 28, 484, 424, 114, 201, 316, 220, 12, 308, 51, 417,
				494, 493, 315, 63, 9, 386, 232, 278, 147, 170, 127, 159, 378, 350, 231, 112, 382, 153, 183, 139, 307,
				490, 84, 435, 455, 380, 506, 454, 87, 198, 374, 101, 43, 441, 505, 106, 226, 270, 100, 262, 370, 322,
				207, 453, 86, 10, 88, 425, 16, 32, 298, 356, 133, 77, 469, 332, 456, 134, 392, 39, 154, 377, 339, 395,
				288, 363, 59, 37, 122, 123, 65, 279, 110, 337, 436, 199, 305, 383, 503, 142, 2, 228, 186, 115, 289, 211,
				410, 180, 128, 271, 313, 172, 259, 41, 194, 131, 214, 66, 375, 297, 409, 241, 230, 281, 64, 451, 447,
				412, 411, 428, 216, 104, 164, 107, 195, 70, 472, 13, 140, 292, 508, 129, 342, 265, 69, 233, 173, 419,
				444, 299, 334, 507, 523, 325, 108, 224, 319, 244, 330, 394, 348, 333, 91, 275, 35, 213, 267, 353, 459,
				513, 42, 340, 311, 310, 60, 403, 439, 274, 475, 431, 23, 357, 15, 495, 498, 58, 92, 168, 413, 135, 440,
				209, 511, 295, 25, 221, 492, 483, 163, 397, 479, 1, 351, 266, 162, 120, 250, 434, 258, 205, 346, 113,
				317, 482, 237, 263, 238, 200, 405, 349, 474, 396, 256, 174, 96, 125, 177, 79, 229, 408, 150, 510, 54,
				406, 449, 466, 391, 143, 222, 407, 324, 192, 364, 336, 476, 242, 257, 429, 206, 62, 399, 67, 314, 197,
				145, 184, 401, 512 };
		System.out.println(new MaxAreaCake().maxArea(850, 524, hor, ver));
	}

}
