Input: n = 7, headID = 6, manager = [1,2,3,4,5,6,-1], informTime = [0,6,5,4,3,2,1]
Output: 21
Explanation: The head has id = 6. He will inform employee with id = 5 in 1 minute.
The employee with id = 5 will inform the employee with id = 4 in 2 minutes.
The employee with id = 4 will inform the employee with id = 3 in 3 minutes.
The employee with id = 3 will inform the employee with id = 2 in 4 minutes.
The employee with id = 2 will inform the employee with id = 1 in 5 minutes.
The employee with id = 1 will inform the employee with id = 0 in 6 minutes.
Needed time = 1 + 2 + 3 + 4 + 5 + 6 = 21.


n = 1, headID = 0, manager = [-1], informTime = [0]





Nodes :
{
  id
  NextNodes
  informTime 
}



n = 7, headID = 6, manager = [1,2,3,4,5,6,-1], informTime = [0,6,5,4,3,2,1]

21 

6 5 4 3 2 1

0 -> [1] 0
1 -> [2] 6
2    3
3    4
4    5
5    6
6    [-1][5]1


head -> 5



class Solution {
    public int numOfMinutes(int n, int headID, int[] manager, int[] informTime) {
        List<Integer>[] graph = new List[n];
        for (int i = 0; i < n; i++) graph[i] = new ArrayList<>();
        for (int i = 0; i < n; i++) if (manager[i] != -1) graph[manager[i]].add(i);
        Queue<int[]> q = new LinkedList<>(); // Since it's a tree, we don't need `visited` array
        q.offer(new int[]{headID, 0});
        int ans = 0;
        while (!q.isEmpty()) {
            int[] top = q.poll();
            int u = top[0], w = top[1];
            ans = Math.max(w, ans);
            for (int v : graph[u]) q.offer(new int[]{v, w + informTime[u]});
        }
        return ans;
    }
}


n = 4, headID = 2, manager = [3,3,-1,2], informTime = [0,0,162,914]


                                      2
                                      3
                                    0   1


n = 15, headID = 0, manager = [-1,0,0,1,1,2,2,3,3,4,4,5,5,6,6], informTime = [1,1,1,1,1,1,1,0,0,0,0,0,0,0,0]


                                    0
                               1           2 
                             3  4       5      6
                           7 8 9 10    11 12  13 14
                           
                           
                           
                           1 + 1 + 
                           
                           
                           
                   
8
0
[-1,5,0,6,7,0,0,0]
[89,0,0,0,0,523,241,519]

                                          0
                                        5   2 8 9 6  7
                                       1          3  4
                    
                                          
                                          
                                

89 + 523 
     241
     519
    
     
n = 7, headID = 6, manager = [1,2,3,4,5,6,-1], informTime = [0,6,5,4,3,2,1]

{
  1: 0
  2: 1
  3: 2
  4: 3
  5: 4
}

Map<Integer, List<Integer>> map = new HashMap<>();

for (int i=0; i<7; i++) {
	if (manager[i]!=-1) {
	    List<Integer> nodes = map.getOrDefault(manager[i], new ArrayList<>());
	    nodes.add(i);
		map.put(manager[i], nodes);
	}
}

Queue<Integer> q = new PriorityQueue<>();

q.add(new int[]{headID, 0});

// loop thru all nodes and update maxTime.
int res = 0;
while(!q.isEmpty()) {
	int[] node = q.poll();
	int id = node[0];
	int time = node[1];
	int res = Math.max(res, time);
	for ( int i : map.get(id)) {
		q.add(new int[]{i, informTime[i] + time});
	}
}

return res;








































