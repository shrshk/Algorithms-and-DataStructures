n - 1
n / 2 (if n is even)
n / 3 (if n % 3 == 0)

while (n!=0) {
	if (n%2==0) {
		n = n/2;
	}else if (n%3==0) {
		n = n/3;
	}else {
		n = n-1;
	}	
	count++;	
}



// bfs

public int steps(int n) {
	// steps
	// keep track of the number visited to not visit again
	// explore and add steps until you reach 1
	
	int steps = 0;
	Queue<Integer> q = new ArrayDeque<>();
	boolean visited = new boolean[n+1];
	
	q.add(n);
	visited[n] = true;
	
	while(!q.isEmpty()) {
		int size = q.size();
		for (int i=0; i<size;i++) {
		int curr = q.poll();
		if (curr == 1)
			return steps;
		
		if (!visited[curr-1]) {
			q.add(curr-1);
			visited[curr-1] = true;
		}
		
		if (curr%2==0 && !visited[curr/2]) {
			q.add(curr/2);
			visited[curr/2]=true;
		}
		
		if (curr%3==0 && !visited[curr/3]) {
			q.add(curr/3);
			visited[curr/3]=true;
		}
		
			steps++;
		}
		
	}
	
	
	return steps;
	
	
	
}